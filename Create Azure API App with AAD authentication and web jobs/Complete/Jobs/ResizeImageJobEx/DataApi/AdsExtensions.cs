// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ResizeImageJobEx.DataApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Ads.
    /// </summary>
    public static partial class AdsExtensions
    {
            /// <summary>
            /// Return all Ads from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryId'>
            /// Id of category that filter ads.
            /// </param>
            public static IList<Ad> GetAdsByCategory(this IAds operations, long categoryId)
            {
                return Task.Factory.StartNew(s => ((IAds)s).GetAdsByCategoryAsync(categoryId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return all Ads from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='categoryId'>
            /// Id of category that filter ads.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Ad>> GetAdsByCategoryAsync(this IAds operations, long categoryId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdsByCategoryWithHttpMessagesAsync(categoryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return all Ads from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Ad> GetAds(this IAds operations)
            {
                return Task.Factory.StartNew(s => ((IAds)s).GetAdsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return all Ads from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Ad>> GetAdsAsync(this IAds operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new or updated existent Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ad'>
            /// New or existent Ad
            /// </param>
            public static Ad PostAd(this IAds operations, Ad ad)
            {
                return Task.Factory.StartNew(s => ((IAds)s).PostAdAsync(ad), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new or updated existent Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ad'>
            /// New or existent Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Ad> PostAdAsync(this IAds operations, Ad ad, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAdWithHttpMessagesAsync(ad, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return Ad by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of Ad
            /// </param>
            public static Ad GetAd(this IAds operations, long id)
            {
                return Task.Factory.StartNew(s => ((IAds)s).GetAdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return Ad by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Ad> GetAdAsync(this IAds operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put updated Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Ad
            /// </param>
            /// <param name='ad'>
            /// Existent Ad
            /// </param>
            public static void PutAd(this IAds operations, long id, Ad ad)
            {
                Task.Factory.StartNew(s => ((IAds)s).PutAdAsync(id, ad), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put updated Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Ad
            /// </param>
            /// <param name='ad'>
            /// Existent Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAdAsync(this IAds operations, long id, Ad ad, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutAdWithHttpMessagesAsync(id, ad, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Ad
            /// </param>
            public static Ad DeleteAd(this IAds operations, long id)
            {
                return Task.Factory.StartNew(s => ((IAds)s).DeleteAdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the Ad.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Ad
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Ad> DeleteAdAsync(this IAds operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteAdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
