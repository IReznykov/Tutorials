// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ClientApp.DataApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Categories.
    /// </summary>
    public static partial class CategoriesExtensions
    {
            /// <summary>
            /// Return all Categories from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Category> GetCategories(this ICategories operations)
            {
                return Task.Factory.StartNew(s => ((ICategories)s).GetCategoriesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return all Categories from data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Category>> GetCategoriesAsync(this ICategories operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create new or updated existent Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// New or existent Category
            /// </param>
            public static object PostCategory(this ICategories operations, Category category)
            {
                return Task.Factory.StartNew(s => ((ICategories)s).PostCategoryAsync(category), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new or updated existent Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='category'>
            /// New or existent Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostCategoryAsync(this ICategories operations, Category category, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCategoryWithHttpMessagesAsync(category, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return Category by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of Category
            /// </param>
            public static Category GetCategory(this ICategories operations, long id)
            {
                return Task.Factory.StartNew(s => ((ICategories)s).GetCategoryAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return Category by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Category> GetCategoryAsync(this ICategories operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put updated Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Category
            /// </param>
            /// <param name='category'>
            /// Existent Category
            /// </param>
            public static void PutCategory(this ICategories operations, long id, Category category)
            {
                Task.Factory.StartNew(s => ((ICategories)s).PutCategoryAsync(id, category), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put updated Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Category
            /// </param>
            /// <param name='category'>
            /// Existent Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutCategoryAsync(this ICategories operations, long id, Category category, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PutCategoryWithHttpMessagesAsync(id, category, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Category
            /// </param>
            public static Category DeleteCategory(this ICategories operations, long id)
            {
                return Task.Factory.StartNew(s => ((ICategories)s).DeleteCategoryAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the Category.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Category> DeleteCategoryAsync(this ICategories operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCategoryWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
